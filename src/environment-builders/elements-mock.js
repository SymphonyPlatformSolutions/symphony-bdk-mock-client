var $jscomp={scope:{},executeAsyncGenerator:function(a){function c(b){return a.next(b)}function b(b){return a.throw(b)}return new Promise(function(f,d){function e(a){a.done?f(a.value):Promise.resolve(a.value).then(c,b).then(e,d)}e(a.next())})}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(a,c,b){if(b.get||b.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[c]=b.value)};
$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX="jscomp_symbol_";$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(a){return $jscomp.SYMBOL_PREFIX+(a||"")+$jscomp.symbolCounter_++};
$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var a=$jscomp.global.Symbol.iterator;a||(a=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[a]&&$jscomp.defineProperty(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(a){var c=0;return $jscomp.iteratorPrototype(function(){return c<a.length?{done:!1,value:a[c++]}:{done:!0}})};
$jscomp.iteratorPrototype=function(a){$jscomp.initSymbolIterator();a={next:a};a[$jscomp.global.Symbol.iterator]=function(){return this};return a};core=SYMPHONY.services.subscribe("core");var mockInstance={sandbox:{getExtension:function(a){return console.debug("You're calling to get the extension "+a+", but this is just a mock of the sandbox.")},send:function(a){return mockBasedOnApiCall(a)}}};core.init(mockInstance);
function mockBasedOnApiCall(a){return $jscomp.executeAsyncGenerator(function(){function c(c,e){for(;;)switch(b){case 0:console.debug("This would be an asynchronous API call, but this is just a mock now. Call: "+a.id);d=!1;f=a.id;if(!d&&"CREATE_STREAM"!==f){b=2;break}d=!0;b=-1;return{value:{streamId:123},done:!0};case 2:if(!d&&"SEND_CHAT_V2"!==f){b=3;break}d=!0;if(!a.payload||!a.payload.entityJSON){b=4;break}b=5;return{value:sleep(1E3),done:!1};case 5:if(void 0===e){b=6;break}b=-1;throw e;case 6:return console.log("Form Values Being Sent: "+
JSON.stringify(a.payload.entityJSON.formValues,null,2)),b=-1,{value:{objectHash:111,status:"ACCEPTED"},done:!0};case 4:b=1;break;case 3:d=!0;b=1;break;case 1:b=-1;default:return{value:void 0,done:!0}}}var b=0,f,d,e={next:function(a){return c(a,void 0)},throw:function(a){return c(void 0,a)},return:function(a){throw Error("Not yet implemented");}};$jscomp.initSymbolIterator();e[Symbol.iterator]=function(){return this};return e}())}function AccountService(){}
AccountService.prototype={implements:["getPodId","getUserId"],register:function(){SYMPHONY.services.make("account",this,this.implements,!0)},getPodId:function(){return 1},getUserId:function(){return 111}};var accountService=new AccountService;accountService.register();function CurrentUserService(){}
CurrentUserService.prototype={implements:["getCurrentUserId","getCurrentUserPrettyName"],register:function(){SYMPHONY.services.make("current-user",this,this.implements,!0)},getCurrentUserPrettyName:function(){return"User Pretty Name"},getCurrentUserId:function(){return 111}};var currentUserService=new CurrentUserService;currentUserService.register();function sleep(a){return new Promise(function(c){return setTimeout(c,a)})};